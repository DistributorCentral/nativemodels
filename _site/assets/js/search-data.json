{
  "0": {
    "id": "0",
    "title": "404",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "createModel",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/createModel/",
    "relUrl": "/docs/createModel/"
  },
  "2": {
    "id": "2",
    "title": "Docs",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/",
    "relUrl": "/docs/"
  },
  "3": {
    "id": "3",
    "title": "About",
    "content": "Coming Soon",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  },
  "4": {
    "id": "4",
    "title": "Getting Started",
    "content": "Getting Started Create your schema first schema/photo.js const { string } = require(&#39;nativemodels/datatypes&#39;); const photoSchema = { ext: string(), url: string().required(), }; module.exports = photoSchema; schema/contact.js const { email, phone, url } = require(&#39;nativemodels/customtypes&#39;); const contactSchema = { email: email(), phone: phone(), url: url(), }; module.exports = contactSchema; schema/user.js const { array, boolean, computed, date, int, object, string } = require(&#39;nativemodels/datatypes&#39;); const contactSchema = require(&#39;./contact&#39;); const photoSchema = require(&#39;./photo&#39;); const userSchema = { accountID: int().nullable(), contact: object(contactSchema), created: date(), firstName: string().required(), fullName: computed((record) =&gt; `${record.firstName} ${record.lastName}`), isAdmin: boolean().nullable(), lastName: string().required(), photos: array(object(photoSchema)), typeID: int().default(2), }; module.exports = userSchema; Now create your model models/user.js const { createModel } = require(&#39;nativemodels&#39;); const userSchema = require(&#39;./../schema/user&#39;); module.exports = createModel(userSchema); Now your your model with data index.js const userModel = require(&#39;./models/user&#39;); const johnSmith = userModel({ contact: { email: &#39;j.smith@example.com&#39;, }, firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, photos: [ { ext: &#39;.jpg&#39;, url: &#39;https://example.com/img.jpg&#39;, }, ], }); console.log(johnSmith); // =&gt; { firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, fullName: &#39;John Smith&#39;, ...} const userRecords = [ { firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, }, { firstName: &#39;Jane&#39;, lastName: &#39;Doe&#39;, }, ]; const users = userRecords.map(userModel); console.log(users); // =&gt; [{ firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, fullName: &#39;John Smith&#39;, ...}] const janeDoe = userModel({ ...johnSmith, firstName: &#39;Jane&#39;, lastName: &#39;Doe&#39;, }); console.log(janeDoe); // =&gt; { firstName: &#39;Jane&#39;, lastName: &#39;Doe&#39;, fullName: &#39;Jane Doe&#39;, ...}",
    "url": "http://localhost:4000/getting-started/",
    "relUrl": "/getting-started/"
  },
  "5": {
    "id": "5",
    "title": "Home",
    "content": "Native runtime type checking Native Models provides a way to map objects in a clean and typed way. The main goal is to ensure runtime type checking and consistent models for APIs. Get started now View it on GitHub Quick Start 1. Install yarn install nativemodels 2. Define your model schema const { computed, string } = require(&#39;nativemodels/datatypes&#39;); const { email } = require(&#39;nativemodels/customtypes&#39;); const schema = { firstName: string(), lastName: string(), fullName: computed((record) =&gt; `${record.firstName} ${record.lastName}`), email: email(), }; module.exports = schema; 3. Create and consume your model const { createModel } = require(&#39;nativemodels&#39;); const schema = require(&#39;./schema&#39;); const userModel = createModel(schema); const userData = { firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, email: &#39;john.smith@example.com&#39;, }; const user = userModel(userData); /* * { * firstName: &#39;John&#39;, * lastName: &#39;Smith&#39;, * fullName: &#39;John Smith&#39;, * email: &#39;john.smith@example.com&#39;, * } */",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "6": {
    "id": "6",
    "title": "schema",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/schema/",
    "relUrl": "/docs/schema/"
  }
  
}
