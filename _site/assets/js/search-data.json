{
  "0": {
    "id": "0",
    "title": "404",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "createModel",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/createModel/",
    "relUrl": "/docs/createModel/"
  },
  "2": {
    "id": "2",
    "title": "Docs",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/",
    "relUrl": "/docs/"
  },
  "3": {
    "id": "3",
    "title": "About",
    "content": "Coming Soon",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  },
  "4": {
    "id": "4",
    "title": "Getting Started",
    "content": "Coming Soon",
    "url": "http://localhost:4000/getting-started/",
    "relUrl": "/getting-started/"
  },
  "5": {
    "id": "5",
    "title": "Home",
    "content": "Native runtime type checking Native Models provides a way to map objects in a clean and typed way. The main goal is to ensure runtime type checking and consistent models for APIs. Quick Start 1. Install yarn install nativemodels 2. Define your model schema const { computed, string } = require(&#39;nativemodels/datatypes&#39;); const { email } = require(&#39;nativemodels/customtypes&#39;); const schema = { firstName: string(), lastName: string(), fullName: computed((record) =&gt; `${record.firstName} ${record.lastName}`), email: email(), }; module.exports = schema; 3. Create and consume your model const { createModel } = require(&#39;nativemodels&#39;); const schema = require(&#39;./schema&#39;); const userModel = createModel(schema); const userData = { firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, email: &#39;john.smith@example.com&#39;, }; const user = userModel(userData); /* * { * firstName: &#39;John&#39;, * lastName: &#39;Smith&#39;, * fullName: &#39;John Smith&#39;, * email: &#39;john.smith@example.com&#39;, * } */",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "6": {
    "id": "6",
    "title": "schema",
    "content": "Coming Soon",
    "url": "http://localhost:4000/docs/schema/",
    "relUrl": "/docs/schema/"
  }
  
}
